[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ThinPlateSplines",
    "section": "",
    "text": "ThinPlateSplines.jl\nThis small module implements thin-plate splines for Julia. Thin-plate splines are a very useful technique for representing smooth, continuous deformations in 2, 3, or N-dimensional space. They are often used in data interpolation, shape matching, and geometric design. Thin-plate splines allow you to specify a deformation on the entire space by specifying a set of ‘control points’ - their original and deformed positions. You can then ‘extrapolate’ the resulting deformation to the rest of the space, in a way that minimizes the bending energy over the entire space.\nIn this module, deformations are represented using the ThinPlateSpline type. Three functions are exposed:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "index.html#thinplatesplines.jl",
    "href": "index.html#thinplatesplines.jl",
    "title": "ThinPlateSplines",
    "section": "",
    "text": "tps_solve, which takes as input a set of control points and deformed control points, and a stiffness coefficient, and produces a deformation.\ntps_deform, which takes as input as set of points and a deformation, and deforms the points according to the deformation.\ntps_energy, a utility function which returns the bending energy of a thin-plate spline. This function is useful when you want to compare different deformations to each other.\n\n\nExample usage\nConsider the following points (vertices of a triangle in 2D):\nx1 = [0.0 1.0 \n      1.0 0.0\n      1.0 1.0]\nAnd consider deforming them slightly:\nx2 = [0.0 1.0\n      1.1 0.0\n      1.2 1.5]\nNow calculate the TPS associated with this deformation (setting the stiffness coefficient to 1.0):\ntps = tps_solve(x1,x2,1.0)\nAnd deform another set of points using this deformation (note that one of the points is the same, and will be deformed in the same way):\nx = [1.0 0.0\n     2.0 2.0]\ntps_deform(x,tps)\nThe output should be something like:\n 1.1  5.55112e-17\n 2.5  3.5\nWe can also calculate the bending energy of this deformation:\ntps_energy(tps)\nThe result should be 0, which indicates that it is a fully affine transform.\n\n\nTransforming lines/curves\nHow about a more general example? How about deforming continuous lines, not just points? tps_deform is general enough to be able to do that, without having to actually discretize the line as a lot of points. We can represent lines parametrically using linear functions of some variable t, with the TaylorSeries package. For example, let’s represent the line in the plane given by x(t) = 2 + t, y(t) = 1 + t/2:\nusing TaylorSeries\nt = Taylor1([0,1],15)\nline = [2 + t, 1 + 0.5*t]'\nWe can deform this line just as we can with points:\ndeformed_line = tps_deform(line, tps)\nThis will look something like: [2.4 + 1.25 t + O(t¹⁶), 2.0 + 1.25 t + O(t¹⁶)]. In this case, since the transform is fully affine, the result is also a straight line, and so no terms higher than t exist. In general tps transforms, higher-order terms may exist. For instance:\nx1 = [0.0 1.0\n      1.0 0.0\n      1.0 1.0\n      1.0 2.0]\nx2 = [0.0 1.0\n      1.1 0.1\n      1.2 1.5\n      1.3 2.0]\ntps_deform(line,tps_solve(x1,x2,1.0))\nGives a more complicated curve, with y(t) = 1.472 + 0.603 t - 0.009 t² + .... Note that this general idea can be extended to planes in 3D (or, indeed, higher-order dimensions) or even deformation of general geometric objects like spheres, etc.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "1_Tps-2d.html",
    "href": "1_Tps-2d.html",
    "title": "[1:nlon, 1:nlat]",
    "section": "",
    "text": "案例\nset_seed(1)\nntime = 24\ny = repeat(st.alt, outer=(1, ntime)) # [nsite, ntime], pseudo data\nλ = 1.0 # 小: 局部细节; 大: 空间上更加平缓\n\n@time tps = tps_solve(x, y, λ)\n@time R = tps_deform(x, tps)\n\n  5.914177 seconds (58.02 M allocations: 2.543 GiB, 9.12% gc time, 60.20% compilation time)\n  2.936317 seconds (1.68 M allocations: 130.812 MiB, 1.81% gc time, 37.36% compilation time)\n\n\n2481×24 Matrix{Float64}:\n 309.141    309.141    309.141    …  309.141    309.141    309.141\n 309.141    309.141    309.141       309.141    309.141    309.141\n 367.566    367.566    367.566       367.566    367.566    367.566\n 510.639    510.639    510.639       510.639    510.639    510.639\n 459.505    459.505    459.505       459.505    459.505    459.505\n 179.13     179.13     179.13     …  179.13     179.13     179.13\n 620.704    620.704    620.704       620.704    620.704    620.704\n 844.187    844.187    844.187       844.187    844.187    844.187\n 799.73     799.73     799.73        799.73     799.73     799.73\n 379.295    379.295    379.295       379.295    379.295    379.295\n 446.187    446.187    446.187    …  446.187    446.187    446.187\n 167.374    167.374    167.374       167.374    167.374    167.374\n 621.41     621.41     621.41        621.41     621.41     621.41\n   ⋮                              ⋱                        \n  39.2298    39.2298    39.2298       39.2298    39.2298    39.2298\n 100.238    100.238    100.238    …  100.238    100.238    100.238\n  42.4831    42.4831    42.4831       42.4831    42.4831    42.4831\n  11.1633    11.1633    11.1633       11.1633    11.1633    11.1633\n 142.462    142.462    142.462       142.462    142.462    142.462\n 173.832    173.832    173.832       173.832    173.832    173.832\n 131.018    131.018    131.018    …  131.018    131.018    131.018\n  54.1745    54.1745    54.1745       54.1745    54.1745    54.1745\n  41.3448    41.3448    41.3448       41.3448    41.3448    41.3448\n  55.8383    55.8383    55.8383       55.8383    55.8383    55.8383\n   1.31333    1.31333    1.31333       1.31333    1.31333    1.31333\n  -4.4104    -4.4104    -4.4104   …   -4.4104    -4.4104    -4.4104",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>[1:nlon, 1:nlat]</span>"
    ]
  },
  {
    "objectID": "1_Tps-2d.html#案例",
    "href": "1_Tps-2d.html#案例",
    "title": "[1:nlon, 1:nlat]",
    "section": "",
    "text": "x1: [nsite, [lon, lat, alt, NDVI]], Matrix\ny: precipitation\n\nVector: 1个时刻的降水\nMatrix: 所有时刻的降水，[nstie, 24*31]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>[1:nlon, 1:nlat]</span>"
    ]
  },
  {
    "objectID": "1_Tps-2d.html#栅格插值结果",
    "href": "1_Tps-2d.html#栅格插值结果",
    "title": "[1:nlon, 1:nlat]",
    "section": "栅格插值结果",
    "text": "栅格插值结果\n\ndata = [X[:] Y[:]]\n@time _A = tps_deform(data, tps)\nA = reshape(_A, nlon, nlat, ntime)\nra_out = rast(A, ra)\n\n  8.421309 seconds (13 allocations: 214.397 MiB, 3.48% gc time)\n\n\n\nSpatRaster{Float64}: Raster\n  A        : Array{Float64, 3} | (140, 80, 24) | 2.05 Mb\n  b        : bbox(70.0, 15.0, 140.0, 55.0)\n  cellsize : (0.5, 0.5)\n  lon, lat : 70.25:0.5:139.75, 54.75:-0.5:15.25\n  time     : nothing\n  bands    : nothing\n  nodata   : nothing\n\n\n\n\nimagesc(lon, lat, A[:, :, 1])\n\n\n┌ Warning: Found `resolution` in the theme when creating a `Scene`. The `resolution` keyword for `Scene`s and `Figure`s has been deprecated. Use `Figure(; size = ...` or `Scene(; size = ...)` instead, which better reflects that this is a unitless size and not a pixel resolution. The key could also come from `set_theme!` calls or related theming functions.\n\n└ @ Makie ~/.julia/packages/Makie/UjJJY/src/scenes.jl:238",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>[1:nlon, 1:nlat]</span>"
    ]
  },
  {
    "objectID": "Reference.html",
    "href": "Reference.html",
    "title": "NetCDFTools.jl",
    "section": "",
    "text": "Installation\nDocumentation for NetCDFTools.jl, a Julia package for loading/writing NetCDF data on the top of NCDatasets.jl.\nInside the Julia shell, you can download and install using the following commands:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NetCDFTools.jl</span>"
    ]
  },
  {
    "objectID": "Reference.html#installation",
    "href": "Reference.html#installation",
    "title": "NetCDFTools.jl",
    "section": "",
    "text": "using Pkg\nPkg.add(\"NetCDFTools\")\nnc_open\nnc_cellsize\n\nBase.getindex\n\nNetCDFTools.NcDim\nNetCDFTools.ncdim_def\n\nncvar_def\nnc_attr!\nnc_read\nnc_write\nnc_write!\n\nncsave",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NetCDFTools.jl</span>"
    ]
  },
  {
    "objectID": "Reference.html#utilities",
    "href": "Reference.html#utilities",
    "title": "NetCDFTools.jl",
    "section": "Utilities",
    "text": "Utilities\nQDM\n\nnc_agg \nnc_agg_dir\n\nnc_combine\nnc_subset\nnc_crop\nsplit_chunk",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NetCDFTools.jl</span>"
    ]
  },
  {
    "objectID": "Reference.html#interpolation",
    "href": "Reference.html#interpolation",
    "title": "NetCDFTools.jl",
    "section": "Interpolation",
    "text": "Interpolation\nspInterp\nbilinear\nweight_idw\nearth_dist\nangle_azimuth_sphere",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NetCDFTools.jl</span>"
    ]
  },
  {
    "objectID": "Reference.html#cmip-functions",
    "href": "Reference.html#cmip-functions",
    "title": "NetCDFTools.jl",
    "section": "CMIP functions",
    "text": "CMIP functions\nCMIP.Tem_F2C\nCMIP.heat_index\n\nCMIP.get_model\nCMIP.CMIPFiles_info",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NetCDFTools.jl</span>"
    ]
  },
  {
    "objectID": "Reference.html#mfdataset",
    "href": "Reference.html#mfdataset",
    "title": "NetCDFTools.jl",
    "section": "MFDataset",
    "text": "MFDataset\nMFDataset",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NetCDFTools.jl</span>"
    ]
  }
]